package main

import (
	"fmt"
	"io/ioutil"
	"os"
	"os/exec"
	"path/filepath"
	"runtime"
	"strings"
	"time"

	"github.com/alexflint/go-arg"
	"github.com/shirou/gopsutil/v3/process"
)

var args struct {
	Dir  string `arg:"-d,--dir" help:"directory containing malware samples to execute"`
	File string `arg:"-f,--file" help:"specify the path to a single malware sample to execute"`
}

var (
	malwareCount         int
	malwareBypassAvCount int
	malwareFiles         []string
	done                 bool
)

var colors = map[string]string{
	"red":    "\u001b[91m",
	"green":  "\u001b[32m",
	"yellow": "\u001b[33m",
	"end":    "\u001b[0m",
}

func fileExists(file string) bool {
	if _, err := os.Stat(file); !os.IsNotExist(err) {
		return true
	}
	return false
}

func remove(s []string, i int) []string {
	s[i] = s[len(s)-1]
	return s[:len(s)-1]
}

func stringInSlice(str string, slice []string) bool {
	i := 0
	for _, s := range slice {
		base := filepath.Base(s)
		if base == str {
			// removing malware file from slice to avoid retesting
			malwareFiles = remove(malwareFiles, i)
			return true
		}
		i += 1
	}
	return false
}

func getAvPreventionPercentage() float32 {
	if malwareCount == 0 {
		return 0.0
	} else {
		return float32(100) - float32(malwareBypassAvCount)/float32(malwareCount)*100
	}
}

func execMalware() {
	for _, malFile := range malwareFiles {
		e := exec.Command(malFile)
		_ = e.Start()
		time.Sleep(150 * time.Millisecond)
	}
	time.Sleep(3 * time.Second)
	done = true
}

func checkForMalwareExecution() {
	processes, err := process.Processes()
	if err != nil {
		fmt.Println("unable to list running processes")
		return
	}
	for _, proc := range processes {
		procName, _ := proc.Name()
		if stringInSlice(procName, malwareFiles) {
			malwareBypassAvCount += 1
			fmt.Printf(
				"%s%s%s=%sexecuted%s (%sâœ“%s)\n",
				colors["green"], procName, colors["end"], colors["red"], colors["end"], colors["yellow"], colors["end"],
			)
		}
	}
}

func main() {
	arg.MustParse(&args)
	if args.File != "" {
		if fileExists(args.File) {
			file, _ := filepath.Abs(args.File)
			malwareFiles = append(malwareFiles, file)
		}
	} else if args.Dir != "" {
		if fileExists(args.Dir) {
			files, err := ioutil.ReadDir(args.Dir)
			if err != nil {
				fmt.Printf("could not list files in directory: %s", args.Dir)
			}
			for _, file := range files {
				f := file.Name()
				f, _ = filepath.Abs(filepath.Join(args.Dir, f))
				if runtime.GOOS == "windows" {
					f = strings.TrimRight(f, ".exe")
				}
				malwareFiles = append(malwareFiles, f)
			}
		}
	} else {
		fmt.Println("must specify `--file` or `--dir` arguments")
		return
	}

	malwareCount = len(malwareFiles)

	go func() {
		for done == false {
			checkForMalwareExecution()
		}
	}()

	execMalware()

	percent := getAvPreventionPercentage()
	fmt.Printf("%sAntiVirus Prevention Rate%s: %.2f%%\n", colors["yellow"], colors["end"], percent)
}
