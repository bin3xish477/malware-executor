package main

import (
	"fmt"
	"io/ioutil"
	"os"
	"os/exec"
	"path/filepath"

	"github.com/alexflint/go-arg"
	"github.com/shirou/gopsutil/v3/process"
)

var args struct {
	Dir  string `arg:"-d,--dir" help:"directory containing malware samples to execute"`
	File string `arg:"-f,--file" help:"specify the path to a single malware sample to execute"`
}

var (
	malwareCount         float32
	malwareBypassAvCount float32
	malwareFiles         []string
)

func file_exists(file string) bool {
	if _, err := os.Stat(file); !os.IsNotExist(err) {
		return true
	}
	return false
}

func stringInSlice(str string, slice []string) bool {
	for _, s := range slice {
		if s == str {
			return true
		}
	}
	return false
}

func getAvPreventionPercentage() float32 {
	if malwareCount == 0 {
		return 0.0
	} else {
		return float32(100) - float32((malwareBypassAvCount/malwareCount)*100)
	}
}

func execMalware(mal_file string) {
	e := exec.Command(mal_file)
	_ = e.Run()
}

func checkForMalwareExecution() {
	processes, err := process.Processes()
	if err != nil {
		fmt.Println("unable to list running processes")
		return
	}
	for _, proc := range processes {
		procName, _ := proc.Name()
		if stringInSlice(procName, malwareFiles) {
			malwareBypassAvCount += 1
		}
	}
}

func main() {
	arg.MustParse(&args)
	if args.File != "" {
		if file_exists(args.File) {
			file, _ := filepath.Abs(args.File)
			malwareFiles = append(malwareFiles, file)
		}
	} else if args.Dir != "" {
		if file_exists(args.Dir) {
			files, err := ioutil.ReadDir(args.Dir)
			if err != nil {
				fmt.Printf("could not list files in directory: %s", args.Dir)
			}
			for _, file := range files {
				malwareFiles = append(malwareFiles, file.Name())
			}
		}
	} else {
		fmt.Println("must specify `--file` or `--dir` arguments")
		return
	}

	go func() {
		for {
			checkForMalwareExecution()
		}
	}()

	percent := getAvPreventionPercentage()
	fmt.Printf("AntiVirus Prevention Rage: %.2f%%\n", percent)
}
